step "generate-github-token" {
    name = "Generate GitHub Token"

    action {
        action_type = "Octopus.Script"
        notes = "Generate a token from a GitHub application used to authenticate with the CaC GitHub repo."
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "sales-maven-feed"
            Octopus.Action.Package.PackageId = "com.octopus:enterprise-patterns-scripts"
            Octopus.Action.Script.ScriptFileName = "github_app_token.py"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-ubuntu"

        packages {
            acquisition_location = "Server"
            feed = "sales-maven-feed"
            package_id = "com.octopus:enterprise-patterns-scripts"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "check-for-updates" {
    name = "Check for Updates"

    action {
        action_type = "Octopus.Script"
        notes = "Check the upstream repo to see if there are any updates to merge into this project."
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "sales-maven-feed"
            Octopus.Action.Package.PackageId = "com.octopus:enterprise-patterns-scripts"
            Octopus.Action.Script.ScriptFileName = "preview_merge_repo.py"
            Octopus.Action.Script.ScriptParameters = "--git-protocol https --git-host github.com --git-organization OctopusSolutionsEngineering --git-username x-access-token --git-password #{Octopus.Action[Generate GitHub Token].Output.GitHubToken} --template-repo-name DSC-AWS-FrontendWebApp --tenant-name \"#{Octopus.Space.Name}\" --silent-fail"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-ubuntu"

        packages {
            acquisition_location = "Server"
            feed = "sales-maven-feed"
            package_id = "com.octopus:enterprise-patterns-scripts"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "another-step" {
    name = "Another Step"

    action {
        action_type = "Octopus.Script"
                environments = ["security"]
                properties = {
                    Octopus.Action.Script.ScriptBody = <<-EOT
                        echo "Doing a vulnerability scan"
                        EOT
                    Octopus.Action.Script.ScriptSource = "Inline"
                    Octopus.Action.Script.Syntax = "Bash"
                }
                worker_pool = "hosted-ubuntu"
    }
}

step "generate-issue-on-failure" {
    condition = "Failure"
    name = "Generate Issue on Failure"

    action {
        action_type = "Octopus.Script"
        excluded_environments = ["security"]
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "sales-maven-feed"
            Octopus.Action.Package.PackageId = "com.octopus:enterprise-patterns-scripts"
            Octopus.Action.Script.ScriptFileName = "github_create_issue.py"
            Octopus.Action.Script.ScriptParameters = "--git-repo InternalEnterprisePatternsIssues --issue-title \"Deployment failed: #{Octopus.Space.Name} #{Octopus.Project.Name} #{Octopus.Release.Number} #{Octopus.Environment.Name}\" --issue-body \"#{Octopus.Web.ServerUri}#{Octopus.Web.DeploymentLink}\""
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-ubuntu"

        packages {
            acquisition_location = "Server"
            feed = "sales-maven-feed"
            package_id = "com.octopus:enterprise-patterns-scripts"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "vulnerability-scan" {
    name = "Vulnerability Scan"

    action {
        action_type = "Octopus.Script"
                environments = ["security"]
                properties = {
                    Octopus.Action.Script.ScriptBody = <<-EOT
                        echo "Doing a vulnerability scan"
                        EOT
                    Octopus.Action.Script.ScriptSource = "Inline"
                    Octopus.Action.Script.Syntax = "Bash"
                }
                worker_pool = "hosted-ubuntu"
    }
}